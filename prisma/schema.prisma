generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String      @id @default(uuid())
  email       String       @unique
  name        String
  imageUrl    String?
  otp String?
  isVerified Boolean @default(false)
  verificationToken String? @unique
  password String
  transactions Transaction[]
  accounts    Account[]
  budgets     Budget[]
  splitDetails SplitDetails[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime @updatedAt
  forgotPasswordOtp String?

  @@map("users")
}

model Transaction {
  id                String            @id @default(uuid())
  type              TransactionType
  amount            Decimal
  description       String?
  date              DateTime
  category          String
  receiptUrl        String?
  isRecurring       Boolean           @default(false)
  nextRecurringDate DateTime?
  recurringInterval RecurringInterval?
  lastProcessed     DateTime?
  isSplit      Boolean      @default(false)
  splitDetails SplitDetails[] 
  status            TransactionStatus @default(COMPLETED)
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId         String
  account           Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Account {
  id          String      @id @default(uuid())
  name        String
  type        AccountType
  balance     Decimal      @default(0)
  isDefault   Boolean      @default(false)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@map("accounts")
}

enum AccountType {
  SAVINGS
  CURRENT
}

model Budget {
  id            String   @id @default(uuid())
  amount        Decimal
  lastAlertSent DateTime?
  userId        String @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@map("budgets")
}

model SplitDetails {
  id           String       @id @default(uuid())
  transactionId String 
  transaction  Transaction  @relation(fields: [transactionId], references: [id],onDelete: Cascade)
  userId String
  user User @relation(fields: [userId],references: [id])
  splitType    SplitType
  participants Json         // JSON array containing participant details

  @@index([id])
  @@map("splitDetails")

}

enum SplitType {
  EQUAL
  UNEQUAL
}